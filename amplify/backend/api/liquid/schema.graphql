enum TranscriptionStatus {
  ENQUEUED
  COMPLETED
  INPROGRESS
  FAILED
}

enum HighlightType {
  TRANSCRIPT
  NORMAL
}

type Persons @model @auth(rules: [{ allow: groups, groupsField: "tenant" }]) {
  id: ID!
  tenant: ID!
  additonalFields: AWSJSON
  name: String
  email: AWSEmail
  persona: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  business: AWSJSON
  templateId: ID
}

type Insights @model @auth(rules: [{ allow: groups, groupsField: "tenant" }]) {
  id: ID!
  tenant: ID!
  projectsID: ID! @index(name: "byProjects")
  content: AWSJSON
  templateId: ID
}

type Highlights
  @model
  @auth(rules: [{ allow: groups, groupsField: "tenant" }]) {
  id: ID!
  tenant: ID!
  color: String!
  text: String!
  Tags: [String]
  tagIds: String
  user: AWSJSON
  type: HighlightType!
  transcriptionID: ID @index(name: "byTranscription")
  projectsID: ID! @index(name: "byProjects")
  storyID: ID! @index(name: "byStory")
  startTime: Int
  endTime: Int
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  templateId: ID
}

type Tags @model @auth(rules: [{ allow: groups, groupsField: "tenant" }]) {
  id: ID!
  tenant: ID!
  label: String!
  color: String!
  projectsID: ID! @index(name: "byProjects")
  tagCategoryID: ID @index(name: "byTagCategories")
  tagCategory: TagCategory! @belongsTo(fields: ["tagCategoryID"])
  updatedAt: AWSDateTime!
  createdAt: AWSDateTime
  templateId: ID
}

type Transcription
  @model
  @auth(rules: [{ allow: groups, groupsField: "tenant" }]) {
  id: ID!
  tenant: ID!
  video: String!
  docId: ID
  transcription: AWSURL
  content: AWSJSON
  Highlights: [Highlights]
    @hasMany(indexName: "byTranscription", fields: ["id"])
  status: TranscriptionStatus!
  templateId: ID
}

type Stories @model @auth(rules: [{ allow: groups, groupsField: "tenant" }]) {
  id: ID!
  tenant: ID!
  icon: String
  categoriesID: ID! @index(name: "byCategories")
  projectsID: ID! @index(name: "byProjects")
  Highlights: [Highlights] @hasMany(indexName: "byStory", fields: ["id"])
  type: String!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  title: String!
  content: AWSJSON
  transcription: Transcription @hasOne
  participants: Persons @hasOne
  templateId: ID
}

type Categories
  @model
  @auth(rules: [{ allow: groups, groupsField: "tenant" }]) {
  id: ID!
  tenant: ID!
  name: String!
  projectsID: ID! @index(name: "byProjects")
  Stories: [Stories] @hasMany(indexName: "byCategories", fields: ["id"])
  templateId: ID
}

type Projects @model @auth(rules: [{ allow: groups, groupsField: "tenant" }]) {
  id: ID!
  tenant: ID!
  name: String!
  icon: String
  readme: AWSJSON
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  Categories: [Categories] @hasMany(indexName: "byProjects", fields: ["id"])
  Stories: [Stories] @hasMany(indexName: "byProjects", fields: ["id"])
  Tags: [Tags] @hasMany(indexName: "byProjects", fields: ["id"])
  Highlights: [Highlights] @hasMany(indexName: "byProjects", fields: ["id"])
  Insights: [Insights] @hasMany(indexName: "byProjects", fields: ["id"])
  templateId: ID
}

type Workspaces
  @model
  @auth(rules: [{ allow: groups, groupsField: "tenant" }]) {
  id: ID!
  tenant: ID!
  organisationsID: ID @index(name: "byOrganisations")
  name: String!
  color: String
  logo: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  personTemplate: AWSJSON
}

type Organisations
  @model
  @auth(rules: [{ allow: groups, groupsField: "tenant" }]) {
  id: ID!
  tenant: ID!
  name: String!
  type: String
  Workspaces: [Workspaces]
    @hasMany(indexName: "byOrganisations", fields: ["id"])
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type VodAsset
  @model(subscriptions: { level: public })
  @auth(rules: [{ allow: groups, groupsField: "tenant" }]) {
  id: ID!
  tenant: ID!
  title: String!
  transcription: Transcription @hasOne
  video: String!
  templateId: ID
}

type TagCategory
  @model
  @auth(rules: [{ allow: groups, groupsField: "tenant" }]) {
  id: ID!
  tenant: ID!
  name: String!
  color: String!
  projectsID: ID! @index(name: "byProjects")
  tags: [Tags] @hasMany(indexName: "byTagCategories", fields: ["id"])
  templateId: ID
}

type Templates @model @auth(rules: [{ allow: private, operations: [read] }]) {
  id: ID!
  content: AWSJSON
  tags: [String]
}
