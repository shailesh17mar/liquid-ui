enum TranscriptionStatus {
  ENQUEUED
  COMPLETED
  INPROGRESS
  FAILED
}

type Persons @model @auth(rules: [{ allow: groups, groupsField: "tenant" }]) {
  id: ID!
  tenant: ID
  additonalFields: AWSJSON
  name: String
  email: AWSEmail
  persona: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  business: AWSJSON
}

type Insights @model @auth(rules: [{ allow: groups, groupsField: "tenant" }]) {
  id: ID!
  tenant: ID
  projectsID: ID! @index(name: "byProjects")
  content: AWSJSON
}

type Highlights
  @model
  @auth(rules: [{ allow: groups, groupsField: "tenant" }]) {
  id: ID!
  tenant: ID
  type: String!
  text: String!
  transcriptionID: ID! @index(name: "byTranscription")
  tags: [Tags] @manyToMany(relationName: "HighlightTags")
  projectsID: ID! @index(name: "byProjects")
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Tags @model @auth(rules: [{ allow: groups, groupsField: "tenant" }]) {
  id: ID!
  tenant: ID
  label: String!
  projectsID: ID! @index(name: "byProjects")
  highlights: [Highlights] @manyToMany(relationName: "HighlightTags")
  updatedAt: AWSDateTime!
  createdAt: AWSDateTime
}

type Transcription
  @model
  @auth(rules: [{ allow: groups, groupsField: "tenant" }]) {
  id: ID!
  tenant: ID
  video: AWSURL!
  transcription: AWSURL
  content: AWSJSON
  Highlights: [Highlights]
    @hasMany(indexName: "byTranscription", fields: ["id"])
  status: TranscriptionStatus!
}

type Stories @model @auth(rules: [{ allow: groups, groupsField: "tenant" }]) {
  id: ID!
  tenant: ID
  categoriesID: ID! @index(name: "byCategories")
  projectsID: ID! @index(name: "byProjects")
  type: String!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  title: String!
  content: AWSJSON
  transcription: Transcription @hasOne
  participants: Persons @hasOne
}

type Categories
  @model
  @auth(rules: [{ allow: groups, groupsField: "tenant" }]) {
  id: ID!
  tenant: ID
  name: String!
  projectsID: ID! @index(name: "byProjects")
  Stories: [Stories] @hasMany(indexName: "byCategories", fields: ["id"])
}

type Projects @model @auth(rules: [{ allow: groups, groupsField: "tenant" }]) {
  id: ID!
  tenant: ID
  name: String!
  readme: AWSJSON
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  Categories: [Categories] @hasMany(indexName: "byProjects", fields: ["id"])
  Stories: [Stories] @hasMany(indexName: "byProjects", fields: ["id"])
  Tags: [Tags] @hasMany(indexName: "byProjects", fields: ["id"])
  Highlights: [Highlights] @hasMany(indexName: "byProjects", fields: ["id"])
  Insights: [Insights] @hasMany(indexName: "byProjects", fields: ["id"])
}

type Workspaces
  @model
  @auth(rules: [{ allow: groups, groupsField: "tenant" }]) {
  id: ID!
  tenant: ID
  organisationsID: ID @index(name: "byOrganisations")
  name: String!
  color: String
  logo: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  personTemplate: AWSJSON
}

type Organisations
  @model
  @auth(rules: [{ allow: groups, groupsField: "tenant" }]) {
  id: ID!
  tenant: ID
  name: String!
  type: String
  Workspaces: [Workspaces]
    @hasMany(indexName: "byOrganisations", fields: ["id"])
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type VodAsset
  @model(subscriptions: { level: public })
  @auth(rules: [{ allow: groups, groupsField: "tenant" }]) {
  id: ID!
  tenant: ID
  title: String!
  description: String!
  transcription: Transcription @hasOne
  video: VideoObject @hasOne
}

type VideoObject
  @model
  @auth(rules: [{ allow: groups, groupsField: "tenant" }]) {
  id: ID!
  tenant: ID
  token: String @function(name: "videoservice-${env}-tokenGen")
}
